/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/affix/basic': RouteRecordInfo<'/affix/basic', '/affix/basic', Record<never, never>, Record<never, never>>,
    '/affix/change': RouteRecordInfo<'/affix/change', '/affix/change', Record<never, never>, Record<never, never>>,
    '/affix/target': RouteRecordInfo<'/affix/target', '/affix/target', Record<never, never>, Record<never, never>>,
    '/button/auto-insert-space': RouteRecordInfo<'/button/auto-insert-space', '/button/auto-insert-space', Record<never, never>, Record<never, never>>,
    '/button/basic': RouteRecordInfo<'/button/basic', '/button/basic', Record<never, never>, Record<never, never>>,
    '/button/block': RouteRecordInfo<'/button/block', '/button/block', Record<never, never>, Record<never, never>>,
    '/button/danger': RouteRecordInfo<'/button/danger', '/button/danger', Record<never, never>, Record<never, never>>,
    '/button/disabled': RouteRecordInfo<'/button/disabled', '/button/disabled', Record<never, never>, Record<never, never>>,
    '/button/ghost': RouteRecordInfo<'/button/ghost', '/button/ghost', Record<never, never>, Record<never, never>>,
    '/button/icon': RouteRecordInfo<'/button/icon', '/button/icon', Record<never, never>, Record<never, never>>,
    '/button/icon-position': RouteRecordInfo<'/button/icon-position', '/button/icon-position', Record<never, never>, Record<never, never>>,
    '/button/loading': RouteRecordInfo<'/button/loading', '/button/loading', Record<never, never>, Record<never, never>>,
    '/button/size': RouteRecordInfo<'/button/size', '/button/size', Record<never, never>, Record<never, never>>,
    '/button/variant': RouteRecordInfo<'/button/variant', '/button/variant', Record<never, never>, Record<never, never>>,
    '/divider/basic': RouteRecordInfo<'/divider/basic', '/divider/basic', Record<never, never>, Record<never, never>>,
    '/divider/customize-style': RouteRecordInfo<'/divider/customize-style', '/divider/customize-style', Record<never, never>, Record<never, never>>,
    '/divider/horizontal': RouteRecordInfo<'/divider/horizontal', '/divider/horizontal', Record<never, never>, Record<never, never>>,
    '/divider/plain': RouteRecordInfo<'/divider/plain', '/divider/plain', Record<never, never>, Record<never, never>>,
    '/divider/size': RouteRecordInfo<'/divider/size', '/divider/size', Record<never, never>, Record<never, never>>,
    '/divider/variant': RouteRecordInfo<'/divider/variant', '/divider/variant', Record<never, never>, Record<never, never>>,
    '/divider/vertical': RouteRecordInfo<'/divider/vertical', '/divider/vertical', Record<never, never>, Record<never, never>>,
    '/divider/with-text': RouteRecordInfo<'/divider/with-text', '/divider/with-text', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/affix/basic.vue': {
      routes: '/affix/basic'
      views: never
    }
    'src/pages/affix/change.vue': {
      routes: '/affix/change'
      views: never
    }
    'src/pages/affix/target.vue': {
      routes: '/affix/target'
      views: never
    }
    'src/pages/button/auto-insert-space.vue': {
      routes: '/button/auto-insert-space'
      views: never
    }
    'src/pages/button/basic.vue': {
      routes: '/button/basic'
      views: never
    }
    'src/pages/button/block.vue': {
      routes: '/button/block'
      views: never
    }
    'src/pages/button/danger.vue': {
      routes: '/button/danger'
      views: never
    }
    'src/pages/button/disabled.vue': {
      routes: '/button/disabled'
      views: never
    }
    'src/pages/button/ghost.vue': {
      routes: '/button/ghost'
      views: never
    }
    'src/pages/button/icon.vue': {
      routes: '/button/icon'
      views: never
    }
    'src/pages/button/icon-position.vue': {
      routes: '/button/icon-position'
      views: never
    }
    'src/pages/button/loading.vue': {
      routes: '/button/loading'
      views: never
    }
    'src/pages/button/size.vue': {
      routes: '/button/size'
      views: never
    }
    'src/pages/button/variant.vue': {
      routes: '/button/variant'
      views: never
    }
    'src/pages/divider/basic.vue': {
      routes: '/divider/basic'
      views: never
    }
    'src/pages/divider/customize-style.vue': {
      routes: '/divider/customize-style'
      views: never
    }
    'src/pages/divider/horizontal.vue': {
      routes: '/divider/horizontal'
      views: never
    }
    'src/pages/divider/plain.vue': {
      routes: '/divider/plain'
      views: never
    }
    'src/pages/divider/size.vue': {
      routes: '/divider/size'
      views: never
    }
    'src/pages/divider/variant.vue': {
      routes: '/divider/variant'
      views: never
    }
    'src/pages/divider/vertical.vue': {
      routes: '/divider/vertical'
      views: never
    }
    'src/pages/divider/with-text.vue': {
      routes: '/divider/with-text'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
